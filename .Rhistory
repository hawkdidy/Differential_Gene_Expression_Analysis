library(limma)
library(oligo)
library(pd.hugene.2.0.st)
library(genefilter)
library(annotate)
library(hugene20sttranscriptcluster.db)
source('~/GitHub/Thesis-Project/Loading_Normalizing.R')
library(limma)
library(oligo)
library(pd.hugene.2.0.st)
library(genefilter)
library(annotate)
library(hugene20sttranscriptcluster.db)
#directory for the data
mydir <- "C:\\Users\\hakim\\Desktop\\Bioinformatics_Thesis_Concordia_Microarry_Data"
#setting seed for reproducibility
set.seed(1)
#listing the files from directory using special CEL file read function
celList <- list.celfiles(mydir, full.names=TRUE)
#reading data from cellist and setting annotation package to approiate one for this microarray
rawData <- read.celfiles(celList, pkgname='pd.hugene.2.0.st')
#normalizing the data using RMA algorithm
normData <- rma(rawData, target="core")
#filtering of genes, removing all control probes and seeing what is filtered
con <- db(pd.hugene.2.0.st)
probes.control <- dbGetQuery(con, "select fsetid from featureSet where
type in ('5','6','7','8','9','10','11','12','13','14','15','16','17');")[,1]
normData.filtered <- nsFilter(normData, require.entrez=FALSE, remove.dupEntrez=FALSE, feature.exclude = probes.control)
normData.filtered$filter.log
#Creating a design matrix based on the experiment and then a linear model for estimating mean expression values
#bayes for shrinking the ste and getting DEGS
group <- factor(c((rep.int(0,13)),rep.int(1,14),rep.int(2,14)
,rep.int(3,14),rep.int(4,14)))
design <- model.matrix(~ 0 + group)
colnames(design) <- c("Intercept","T1","T2","T3", "T4")
#contrast matrix
contrast <- makeContrasts( "Intercept-T1","T1-T2", "T2-T3","T3-T4", levels= design )
normfit <-eBayes( contrasts.fit( lmFit(normData.filtered$eset, design), contrast) )
#getting the list of probes
probeset.list <-topTable(normfit,number=100000, adjust="BH", lfc=1)
#Adding gene symbol to dataset
#retreaving feature data
#featureData(normData) <- getNetAffx(normData, "transcript")
Symbol <- getSYMBOL(rownames(probeset.list), "hugene20sttranscriptcluster.db")
results <- cbind(probeset.list, Symbol)
contrast <- makeContrasts( "Intercept-T1","Intercept-T2","Intercept-T3","Intercept-T4"
,"T1-T2","T1-T3","T1-T4",
, "T2-T3","T2-T4","T3-T4", levels= design )
contrast <- makeContrasts( "Intercept-T1","Intercept-T2","Intercept-T3","Intercept-T4"
,"T1-T2","T1-T3","T1-T4",
"T2-T3","T2-T4","T3-T4", levels= design )
normfit <-eBayes( contrasts.fit( lmFit(normData.filtered$eset, design), contrast) )
#getting the list of probes
probeset.list <-topTable(normfit,number=100000, adjust="BH", lfc=1)
Symbol <- getSYMBOL(rownames(probeset.list), "hugene20sttranscriptcluster.db")
results <- cbind(probeset.list, Symbol)
write.table(probeset.list,file="DEGS_ALL_CONTRAST.txt",sep= "\t" )
results <- cbind(probeset.list, Symbol)
View(results)
View(probeset.list)
write.table(results,file="DEGS_ALL_CONTRAST.txt",sep= "\t" )
source('~/GitHub/Thesis-Project/Pipeline/Genefiltering_Fitting_Model_Results.R')
library(limma)
library(oligo)
library(pd.hugene.2.0.st)
library(genefilter)
library(annotate)
library(hugene20sttranscriptcluster.db)
mydir <- "C:\\Users\\hakim\\Desktop\\Bioinformatics_Thesis_Concordia_Microarry_Data" #insert own directory here
#setting seed for reproducibility
set.seed(1)
#listing the files from directory using special CEL file read function
celList <- list.celfiles(mydir, full.names=TRUE)
#reading data from cellist and setting annotation package to approiate one for this microarray
rawData <- read.celfiles(celList, pkgname='pd.hugene.2.0.st')
#normalizing the data using RMA algorithm
normData <- rma(rawData, target="core")
#retreaving feature data
featureData(normData) <- getNetAffx(normData, "transcript")
con <- db(pd.hugene.2.0.st)
probes.control <- dbGetQuery(con, "select fsetid from featureSet where
type in ('5','6','7','8','9','10','11','12','13','14','15','16','17');")[,1]
normData.filtered <- nsFilter(normData, require.entrez=FALSE, remove.dupEntrez=FALSE, feature.exclude = probes.control)
normData.filtered$filter.log
group <- factor(c((rep.int(0,13)),rep.int(1,14),rep.int(2,14)
,rep.int(3,14),rep.int(4,14)))
design <- model.matrix(~ 0 + group)
colnames(design) <- c("Intercept","T1","T2","T3", "T4")
contrast <- makeContrasts( "Intercept-T1","Intercept-T2","Intercept-T3","Intercept-T4"
,"T1-T2","T1-T3","T1-T4",
"T2-T3","T2-T4","T3-T4", levels= design )
normfit <-eBayes( contrasts.fit( lmFit(normData.filtered$eset, design), contrast) )
#getting the list of probes
probeset.list <-topTable(normfit,number=100000, adjust="BH", lfc=1)
View(probeset.list)
source("http://bioconductor.org/biocLite.R")
biocLite("ReportingTools")
library(ReportingTools)
library("ReportingTools", lib.loc="~/R/win-library/3.2")
biocLite(GO.db)
biocLite("GO.db")
library(ReportingTools)
library(lattice)
rep.theme <- reporting.theme()
lattice.options(default.theme = rep.theme)
deReport <- HTMLReport(shortName = 'de_analysis',
+ title = 'Concordia Gene Expression Analysis',
deReport <- HTMLReport(shortName = 'de_analysis',
title = 'Concordia Gene Expression Analysis',
reportDirectory = "./reports")
publish(fit, deReport, eSet=ALL, factor=group, coef=2, n=100)
publish(normfit, deReport, eSet=ALL, factor=group, coef=2, n=100)
publish(normfit, deReport, eSet=normData, factor=group, coef=2, n=100)
publish(normfit, deReport, eSet=normData.filtered, factor=group, coef=2, n=100)
publish(normfit, deReport, eSet=normData, factor=group, coef=2, n=100)
finish(deReport)
group[,1]
group[1]
group[2]
group$1
group
group[2,]
group[2]
group[,2]
View(design)
rep.theme <- reporting.theme()
lattice.options(default.theme = rep.theme)
deReport <- HTMLReport(shortName = 'de_analysis',
title = 'Concordia Gene Expression Analysis',
reportDirectory = "./reports")
publish(normfit, deReport, eSet=normData, factor="Intercept-T2", coef=2, n=100)
finish(deReport)
?toptable
contrast <- makeContrasts( "IT1","IT2","IT3","IT4"
,"T12","T13","T14",
"T23","T24","T34", levels= design )
contrast <- makeContrasts( "I-T1","I-T2","I-T3","I-T4"
,"T1-T2","T1-T3","T1-T4",
"T2-T3","T2-T4","T3-T4", levels= design )
design <- model.matrix(~ 0 + group)
colnames(design) <- c("I","T1","T2","T3", "T4")
contrast <- makeContrasts( "I-T1","I-T2","I-T3","I-T4"
,"T1-T2","T1-T3","T1-T4",
"T2-T3","T2-T4","T3-T4", levels= design )
normfit <-eBayes( contrasts.fit( lmFit(normData.filtered$eset, design), contrast) )
probeset.list <-topTable(normfit,coef="I-T1",number=100000, adjust="BH", lfc=1)
probeset.listIT1 <-topTable(normfit,coef="I-T1",number=100000, adjust="BH", lfc=1)
probeset.listIT2 <-topTable(normfit,coef="I-T2",number=100000, adjust="BH", lfc=1)
probeset.listIT3 <-topTable(normfit,coef="I-T3",number=100000, adjust="BH", lfc=1)
probeset.listIT4 <-topTable(normfit,coef="I-T4",number=100000, adjust="BH", lfc=1)
probeset.listT12 <-topTable(normfit,coef="T1-T2",number=100000, adjust="BH", lfc=1)
probeset.listT13 <-topTable(normfit,coef="T1-T3",number=100000, adjust="BH", lfc=1)
probeset.listT14 <-topTable(normfit,coef="T1-T4",number=100000, adjust="BH", lfc=1)
probeset.listT23 <-topTable(normfit,coef="T2-T3",number=100000, adjust="BH", lfc=1)
probeset.listT24 <-topTable(normfit,coef="T2-T4",number=100000, adjust="BH", lfc=1)
probeset.listT34 <-topTable(normfit,coef="T3-T4",number=100000, adjust="BH", lfc=1)
write.table(probeset.listIT2,file="DEGS_IT2_CONTRAST.txt",sep= "\t" )
write.table(probeset.listIT3,file="DEGS_IT3_CONTRAST.txt",sep= "\t" )
write.table(probeset.listIT4,file="DEGS_IT4_CONTRAST.txt",sep= "\t" )
write.table(probeset.listT12,file="DEGS_T12_CONTRAST.txt",sep= "\t" )
write.table(probeset.listT13,file="DEGS_T13_CONTRAST.txt",sep= "\t" )
write.table(probeset.listT14,file="DEGS_T14_CONTRAST.txt",sep= "\t" )
write.table(probeset.listT23,file="DEGS_T23_CONTRAST.txt",sep= "\t" )
write.table(probeset.listT24,file="DEGS_T24_CONTRAST.txt",sep= "\t" )
write.table(probeset.listT34,file="DEGS_T34_CONTRAST.txt",sep= "\t" )
